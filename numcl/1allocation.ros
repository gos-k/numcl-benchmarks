#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros dynamic-space-size=10000 -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:trivial-benchmark :numcl) :silent t)
  )

#|
This file is a part of NUMCL project.
Copyright (c) 2019 IBM Corporation
SPDX-License-Identifier: LGPL-3.0-or-later

NUMCL is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

NUMCL is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
NUMCL.  If not, see <http://www.gnu.org/licenses/>.
|#

(defpackage :ros.script.benchmark
  (:use :numcl :trivial-benchmark))
(in-package :ros.script.benchmark)
#+sbcl
(declaim (sb-ext:muffle-conditions sb-ext:compiler-note style-warning))

(load "timer.lisp")

(defun main (&aux)
  (banner)
  (with-timing (:name "ones/bool")
    (let ((a (ones 1000000 :type 'bit)))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "ones/int8")
    (let ((a (ones 1000000 :type '(signed-byte 8))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "ones/int16")
    (let ((a (ones 1000000 :type '(signed-byte 16))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "ones/int32")
    (let ((a (ones 1000000 :type '(signed-byte 32))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "ones/int64")
    (let ((a (ones 1000000 :type '(signed-byte 64))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "ones/float32")
    (let ((a (ones 1000000 :type 'single-float)))
      (setf (aref a 0) 1.0
            (aref a -1) 1.0)))
  (with-timing (:name "ones/float64")
    (let ((a (ones 1000000 :type 'double-float)))
      (setf (aref a 0) 1.0d0
            (aref a -1) 1.0d0)))
  (with-timing (:name "zeros/bool")
    (let ((a (zeros 1000000 :type 'bit)))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "zeros/int8")
    (let ((a (zeros 1000000 :type '(signed-byte 8))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "zeros/int16")
    (let ((a (zeros 1000000 :type '(signed-byte 16))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "zeros/int32")
    (let ((a (zeros 1000000 :type '(signed-byte 32))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "zeros/int64")
    (let ((a (zeros 1000000 :type '(signed-byte 64))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "zeros/float32")
    (let ((a (zeros 1000000 :type 'single-float)))
      (setf (aref a 0) 1.0
            (aref a -1) 1.0)))
  (with-timing (:name "zeros/float64")
    (let ((a (zeros 1000000 :type 'double-float)))
      (setf (aref a 0) 1.0d0
            (aref a -1) 1.0d0)))
  (with-timing (:name "empty/bool")
    (let ((a (empty 1000000 :type 'bit)))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "empty/int8")
    (let ((a (empty 1000000 :type '(signed-byte 8))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "empty/int16")
    (let ((a (empty 1000000 :type '(signed-byte 16))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "empty/int32")
    (let ((a (empty 1000000 :type '(signed-byte 32))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "empty/int64")
    (let ((a (empty 1000000 :type '(signed-byte 64))))
      (setf (aref a 0) 1
            (aref a -1) 1)))
  (with-timing (:name "empty/float32")
    (let ((a (empty 1000000 :type 'single-float)))
      (setf (aref a 0) 1.0
            (aref a -1) 1.0)))
  (with-timing (:name "empty/float64")
    (let ((a (empty 1000000 :type 'double-float)))
      (setf (aref a 0) 1.0d0
            (aref a -1) 1.0d0))))
