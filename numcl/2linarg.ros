#!/bin/sh
#|-*- mode:lisp -*-|#
#|
exec ros dynamic-space-size=10000 -Q -- $0 "$@"
|#
(progn ;;init forms
  (ros:ensure-asdf)
  #+quicklisp(ql:quickload '(:trivial-benchmark :numcl) :silent t)
  )

#|
This file is a part of NUMCL project.
Copyright (c) 2019 IBM Corporation
SPDX-License-Identifier: LGPL-3.0-or-later

NUMCL is free software: you can redistribute it and/or modify it under the terms
of the GNU General Public License as published by the Free Software
Foundation, either version 3 of the License, or (at your option) any
later version.

NUMCL is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A
PARTICULAR PURPOSE.  See the GNU General Public License for more details.

You should have received a copy of the GNU General Public License along with
NUMCL.  If not, see <http://www.gnu.org/licenses/>.
|#

(defpackage :ros.script.benchmark
  (:use :numcl :trivial-benchmark))
(in-package :ros.script.benchmark)
#+sbcl
(declaim (sb-ext:muffle-conditions sb-ext:compiler-note style-warning))

(load (merge-pathnames "timer.lisp" *load-pathname*))

(defun main (&aux
               (a (zeros '(100 100) :type 'single-float))
               (b (zeros '(100 100) :type 'single-float))
               (c (zeros '(100 100) :type 'single-float))
               (a2 (zeros '(1000 1000) :type 'single-float))
               (b2 (zeros '(1000 1000) :type 'single-float))
               (c2 (zeros '(1000 1000) :type 'single-float))
               (d (zeros 100 :type 'single-float))
               (e (zeros 100 :type 'single-float)))
  (banner)
  (with-timing (:name "diag/einsum")
    (einsum '(ii -> i) a))
  (with-timing (:name "diag/builtin")
    (diag a))
  (with-timing (:name "eye/naive")
    (let ((a (zeros '(100 100) :type 'single-float)))
      (dotimes (j 100)
        (setf (aref a j j) 1))))
  (with-timing (:name "eye/builtin")
    (eye 100))
  (with-timing (:name "gemm/einsum")
    (einsum '(ij jk -> ik) a b c))
  (with-timing (:name "gemm/builtin")
    (matmul a b c))
  (with-timing (:name "gemm-large/einsum")
    (einsum '(ij jk -> ik) a2 b2 c2))
  (with-timing (:name "gemm-large/builtin")
    (matmul a2 b2 c2))
  (with-timing (:name "inner/einsum")
    (einsum '(i i -> i) d e))
  (with-timing (:name "inner/builtin")
    (inner d e))
  #+slow
  (with-timing (:name "kron/einsum")
    (einsum '(ij kl -> ikjl) a b))
  #+slow
  (with-timing (:name "kron/builtin")
    (kron a b))
  (with-timing (:name "outer/einsum")
    (einsum '(i j -> ij) d e))
  (with-timing (:name "outer/builtin")
    (outer d e))
  (with-timing (:name "tri/builtin")
    (tri 100))
  (with-timing (:name "tril/builtin")
    (tril b))
  (with-timing (:name "triu/builtin")
    (triu b))
  (with-timing (:name "vander/builtin")
    (vander d))
  (with-timing (:name "vdot/einsum")
    (einsum '(i i -> ) (conjugate d) e))
  (with-timing (:name "vdot/builtin")
    (vdot d e)))
